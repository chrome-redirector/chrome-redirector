#+BEGIN_COMMENT
User guide (Simplified Chinese).

Copyright (C) 2010-2012.

This file is part of Redirector.

Redirector is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Redirector is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Redirector.  If not, see <http://www.gnu.org/licenses/>.

From Cyril Feng.
#+END_COMMENT

#+TITLE:     Redirector指南
#+AUTHOR:    Cyril Feng
#+EMAIL:     CyrilFeng@gmail.com
#+DATE:      2012-03-08
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  zh-CN
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+STYLE: <style>table{margin:auto auto;}</style>
#+STYLE: <style>body{padding:0 20px;}</style>
#+STYLE: <style>i{font-weight:bold;}</style>
#+STYLE: <style>code{background-color:lightgray;font-size:90%}</style>

* 前言
  这份指南旨在介绍一个可以自动／手动重定向URL的 /Chromium/ / /Google Chrome/
  插件—— /Redirector/ 。
  这份指南将着重解释规则的编写，而不求顾及此插件使用的每个方面。

* 符号约定
  - /Cr/ :: /Chromium/ / /Google Chrome/ 浏览器

  - /正则/ :: 正则表达式

  - =~ :: 匹配或被匹配

  - !~ :: 不匹配或不被匹配

  - @<code>...@</code> :: 内容占位符

  - -> :: 重定向至

* 工作机制
  每当 /Cr/ 收到一个web请求， /Redirector/ 就会被触发去处理所请求的URL
  （如果这是允许的，而且没有其它重定向或者屏蔽URL的扩展）。
  值得注意的是，当处理结束后，这个URL将脱离 /Redirector/ 的控制，
  并且再也没有被 /Redirector/ 处理的机会，
  即 /Redirector/ *只进行一次重定向* 。
  更多信息请参考
  [[http://code.google.com/chrome/extensions/webRequest.html#life_cycle][这个页面]]。

  /Redirector/ 会首先检查是否有规则适用于该URL。
  如果有的话，第一条适用的规则将被用于处理该URL。

  手动重定向的过程也是类似的，只不过检查规则可用性的步骤会被跳过。

* 基本使用
  这一部分将介绍 /Redirector/ 的配置及基本的规则编写。

** 协议
   正常情况下， /Redirector/ 处理 =HTTP://= 、 =HTTPS://= 、 =FTP://= 、
   =FILE://= 这几种协议，你也可以在 /首选项/ 标签页下禁用其中的协议。

   *注意：* 最好不要试图处理 =chrome://= 等协议，虽然 /Redirector/ 可以做到。

** 手动重定向
   尽管 /Redirector/ 的主要功能是自动重定向，但自动重定向并不胜任所有情况。
   手动重定向作为其补充，共有两种形式：

   - 右键单击链接并选择一条规则，将会在新标签页打开经规则处理过的链接；
   - 右键单击页面并选择一条规则，将会重新载入经规则处理过的当前页URL。

   *注意：* 你必须创建并启用了至少一条[[BASIC-MATCH-MANUAL][手动规则]]，否则右键菜单里不会出现任何关于
   /Redirector/ 的信息。

** 配置规则
   使用 /添加/ 按钮添加一条规则，这时将会出现规则编辑器。
   你可以选择一条内置的规则或是自己编写当前的规则。

   *注意：* 内置规则仅供参考。其中的一些规则只是框架，应在修改后使用。

   你可以通过 /编辑/ 按钮编辑已有的规则，或是用 /删除/ 进行删除。
   如果有多条规则，你可以通过 /上移/ 、 /下移/ 按钮改变优先级。

   *注意：* 规则是从上到下搜索的，并且禁用的规则会被忽略。

   /备份/ 按钮可以备份规则列表，你需要自行复制备份结果并保存到别处。
   另外你可以通过 /还原/ 按钮还原备份。

** 规则的基本格式
*** 名称
    规则的名称，应尽量容易区分。

*** 匹配
    匹配模式用于确定规则是否适用于特定的URL。
    你可以勾选 /忽略大小写/ 选项进行大小写不敏感的匹配。
    匹配有主要三种形式：
**** /正则/
     用 /正则/ 进行匹配将会在[[ADVANCED_MATCH][高级匹配]]中介绍。
**** 通配符
     通配符其实就是基本的字符串，除了两个字符：
     - ~?~ :: 匹配任意单个字符，例如：
              - ~https://www.google.com.??/~
                =~ ~https://www.google.com.hk/~.


     - ~*~ :: 匹配任意长字符串，包括零字符串。

     *注意：* 若要直接匹配上述两个字符，请分别使用 ~\?~ 和 ~\*~ 。

#<<BASIC-MATCH-MANUAL>>
**** 手动
     特殊的匹配方式，意指规则用于手动重定向。

*** 被替换式
    /被替换式/ 指明URL中的哪些部分需要被替换。
    /被替换式/ 的搜索同样可以忽略大小写；
    另外你也可以勾选 /多次替换/ ，这样所有符合要求的子串都会被替换。

    /被替换式/ 同样有三种形式：
**** /正则/
     使用 /正则/ 搜索 /被替换式/ 将在[[ADVANCED_SUBSTITUTION][高级替换]]中介绍。

**** 通配符
     同 /匹配/ 中的通配符。

**** 屏蔽
     /Redirector/ 除了重定向，也可以屏蔽一条请求。

**** 请求头
     这个选项用来修改“HTTP请求头”。
     这时 /被替换式/ 应是要修改的请求头的名字。
     如果一个请求头不存在，那么它会被创建。
     要删除一个请求头，请在名称前放置减号 ~-~ 。
     如有多条请求头要修改，用竖线 ~|~ 分隔。

*** 替换式
    /替换式/ 用作 /被替换式/ 的填充。
    你可以使用普通的字符串，不过注意 ~$~ 应写作 ~$$~ ，因为
    [[ADVANCED_SUBSTITUTION][高级替换]]
    中会用到它。

    /解码URL/ 选项用作解码最终URL中被编码的字符，比如
    - ~http%3A%2F%2Fwww.google.com%2F~ 译为 ~http://www.google.com/~ 。

    值得注意的是，若 /被替换式/ 是请求头类型的，则替换式应当是对应的值，也用竖线 ~|~ 分隔。
    若值中包括字面意义的竖线 ~|~ ，请使用 ~\|~ 代替。
    对于要删除的请求头，对应的值可以留空。

** 测试
   你应当测试每条编写的规则，否则可能会导致 /Cr/ 假死或者抱怨"He's Dead, Jim!"。
   规则编辑器包括一个简单的测试工具。
   这里只提醒几点：
   - 当编写一条新规则时，选择手动模式，然后编写 /被替换式/ 和 /替换式/ 。
     测试通过后再进行下一步。
     编写 /匹配/ 前请先保存 /被替换式/ 和 /替换式/ 。

   - 当调试一条已有规则时，先简化可能错误的部分。
     规则弄乱了也没关系，直接放弃修改然后重新开始。

   如果一切顺利，测试结果将会显示出来，其中被替换和替换上去的部分会被着色。

#<<ADVANCED_MATCH>>
* 高级匹配
  /高级匹配/ 指的是使用 /正则/ 进行匹配。
  你可能要去参考其它关于 /正则/ 的文章，但请留意 /正则/ 有很多种，
  这里使用的是JavaScript风格的，类似于Perl风格。

  这份简短的指南显然无法介绍关于 /正则/ 的所有方面，这里只挑选那些与URL匹配有关的。
  对于解释，这里也只抽取那些对于URL有意义的。

  /正则/ 的一个基本组件是元字符。它们有特殊的含义，如下表：

| 元字符                 | 意义                       |
|------------------------+----------------------------|
| ~\~                    | 转义下一个字符             |
| ~^~                    | 匹配URL的开头              |
| ~$~                    | 匹配URL的结尾              |
| ~.~                    | 匹配任意字符               |
| @<code>\vert@</code>   | 逻辑或                     |
|------------------------+----------------------------|
| @<code>[...]@</code>   | 字符集                     |
| @<code>[\^...]@</code> | @<code>[...]@</code>的反义 |

  如果想要匹配一个元字符（或一个量词，见下），它们应用反斜线转义，例如：
  - ~https://www\.gogole\.com/~
    =~ ~https://www.google.com/~ 。

  ~^~ 和 ~$~ 都是锚点，用来定位而非匹配字符，例如：
  - ~^https://~ =~ ~https://www.google.com/~
    而 !~ ~http://www.google.com/search?q=https~ 。

  除了 ~^~ 、 ~$~ 之外，还有其它锚点——以 /转义序列/ 的形式提供：

| 锚点 | 意义           |
|------+----------------|
| ~\b~ | 匹配字符的边界 |
| ~\B~ | ~\b~ 的反义    |


  ~|~ 意指逻辑或，例如：
  - ~https://www.google.com~ =~ ~google|yahoo~
    而 !~ ~http://www.bing.com~ 。

  事实上， ~|~ 在 /组/ 中更常用。

  字符集是它所匹配字符的集合，例如：
  - ~[aA]~ =~ ~a~ 或 ~A~

  连字符 ~-~ 在字符集中表示ASCII码表中的一段字符，例如：
  - ~[a-z]~ =~ 所有小写字母
  - ~[0-9]~ =~ 所有数字

  *注意：* 要在字符集中包括连字符，使用 ~\-~ 。
  ~-~ 在其它地方没有特殊意义。

  /正则/ 预定义的一些常用的字符集，也以 /转义序列/ 的形式给出：

| 转义序列 | 意义                                   |
|----------+----------------------------------------|
| ~\w~     | 匹配一个单词字符（字母、数字和下划线） |
| ~\W~     | ~\w~ 的反义                            |
| ~\d~     | 匹配一个数字                           |
| ~\D~     | ~\d~ 的反义                            |
| ~\ddd~   | 匹配ddd号（八进制）ASCII字符           |
| ~\xdd~   | 匹配dd号（十六进制）ASCII字符          |
| ~\udddd~ | 匹配dddd号（十六进制）Unicode字符      |

  正则的另一个基本组件是 /量词/ ，它们附在字符、元字符或 /组/ 之后表示字符应重复多少次：

| 量词    | 意义              |
|---------+-------------------|
| ~*~     | 至少0个，尽可能多 |
| ~+~     | 至少1个，尽可能多 |
| ~?~     | 0或1个，尽可能多  |
| ~{N}~   | 恰好N个           |
| ~{N,}~  | 至少N个，尽可能多 |
| ~{N,M}~ | N到M个，尽可能多  |

  例如：
  - ~^https://www\.google\.com/*~
    =~ 任意以 ~https://www.google.com/~ 开头的URL；
  - ~^http?://~
    =~ 任意以 ~http://~ 或 ~https://~ 开头的URL。

  默认情况下， /Redirector/ 进行“贪婪”模式匹配，也就是匹配尽可能多的字符。
  在量词后附加一个 ~?~ 可以切换到“懒惰”模式。例如：
  - ~https://.*?\.~ 将匹配 ~https://www.google.com~ 中的 ~https://www.~
    而 ~https://.*\.~ 却匹配 ~https://www.google.~.

  一个匹配模式可以被括号隔离起来，即 /组/ ：

| 组                     | 意义     |
|------------------------+----------|
| @<code>(...)@</code>   | 捕获组   |
| @<code>(?:...)@</code> | 非捕获组 |

  捕获组中的内容会保存在自动变量 ~\1~ 到 ~\99~ 中， 从左向右、由外至里编号。
  捕获组可以进行 /反向引用/ ，例如：
  - ~http://(\w+)\.wikipedia\.org/\1/~ =~
    ~http://zh.wikipedia.org/zh/Google~
    而 !~ ~http://zh.wikipedia.org/zh-cn/Google~

  在 /正则/ 中， /扩展模式/ 形如@<code>(?x...)@</code>，例如
  @<code>(?:...)@</code>。其它还有：

| 扩展模式               | 意义                         |
|------------------------+------------------------------|
| @<code>(?=...)@</code> | 后接@<code>...@</code>       |
| @<code>(?!...)@</code> | @<code>(?=...)@</code>的反义 |

  应当特别留意模式@<code>(?!...)@</code>，
  因为 /Redirector/ 不提供所谓的 /黑名单/ ，
  因为你完全可以避免使用它。
  要编写一条规则匹配 ~A~ 的同时不匹配 ~B~ ，可以这样写为 ~^(?!.*B).*A~ 。
  例子：
  - 编写一条 /匹配/ 模式，匹配所有属于google.com及其子域的URL，但不属于code.google.com：
    - ~^(?!.*https?://code\.google\.com)https?://(.*?\.)?google\.com~
    - 这个更紧凑：
      ~^https?://(?!code)(.*?\.)?google.com~

  *注意：* @<code>(?=...)@</code>和@<code>(?!...)@</code>不能捕获任何内容。

#<<ADVANCED_SUBSTITUTION>>
* 高级替换
  除了进行匹配， /正则/ 也是字符串替换的有力工具。
  它们的格式很类似，这里只讨论区别。

  它们的主要区别在于 /组/ ，对于捕获组，它们的结果也被用于 /替换/ 。
  如果不打算捕获，保险起见尽量使用非捕获组。

  /替换式/ 除了可以是字符串字面量，也可以是 /被替换式/ 的一部分。
  这里依靠美元符 ~$~ 实现：

| 特殊替换            | 意义                        |
|---------------------+-----------------------------|
| ~$N~ (~$1~ - ~$99~) | 匹配第N个捕获组中的内容     |
| ~$&~                | /被替换式/ 匹配的全部字符串 |
| ~$`~                | ~$&~ 的左边部分             |
| @<code>$'@</code>   | ~$&~ 的右边部分             |

  ~$1~ - ~$99~ 与[[ADVANCED_MATCH][高级匹配]]中的 ~\1~ - ~\99~ 相对应。

  下面是一些例子：
  - 当 /被替换式/ 为 ~(^[^\.]+[^/]+)/[^/]*~
    且 /替换式/ 为 ~$1/zh-cn~,
    ~http://zh.wikipedia.org/zh-hk/Google~
    -> ~http://zh.wikipedia.org/zh-cn/Google~ ；

  - 当 /被替换式/ 为 ~[^\.]+[^/]+~
    且 /替换式/ 为 ~$&.sixxs.org~,
    ~http://www.google.com/~ -> ~http://www.google.com.sixxs.org/~.

  *注意：*
  对于 /锚点/, /替换式/ 会插入相关位置，例如：
  - 当 /被替换式/ 为 ~$~ 且 /替换式/ 为 ~ncr~,
    ~http://www.google.com/~ -> ~http://www.google.com/ncr~.

* 故障处置
  为提高效率， /Redirector/ 在运行时不对规则的正确性执行严格检查。
  所以你可能会遇到如下情形：

  - 左下角提示“等待扩展 /Redirector/ ” ::
    这说明有一条规则错误，虽然它匹配当前页的URL，但 /Redirector/ 并不知道应怎样处理。

  - 有时你会发现 /Redirector/ 对一个URL作了多次重定向 ::
    比如
    #+BEGIN_EXAMPLE
    想要的结果: https://www.google.com/ -> https://www.google.com/?
    实际的结果: https://www.google.com/ -> https://www.google.com/??
    #+END_EXAMPLE
    最有可能的情况是服务器端进行了重定向。
    参考@<code>(?!...)@</code>的例子编写“黑名单”即可。

  如果你确定问题出在 /Redirector/ 本身，请发送错误报告至<CyrilFeng at gmail dot com>。
  但在此之前，请先确定你已做过下列步骤：
  - 确定在禁用 /Redirector/ 之后问题就会消失；

  - 确定已更新到最新版（ /Cr/ 和 /Redirector/ ）；

  - 如有可能，在重现这个问题时，设置语言为中文或者英语；

  - 同样，用中文或英语描述这个问题；

  - 备份规则列表并随错误报告一起提交，如果不涉及隐私。

* 建议
** 编写高效的 /匹配/ 模式
   /匹配/ 模式的质量是影响 /Redirector/ 效率的主要因素。

   先澄清一些事情：
   - 禁用和手动的规则并不影响效率；

   - 虽然通配符会在内部被转化为 /正则/ ，
     但转化过程只发生在 /Redirector/ 启动或规则列表有改动的时候；

   - 为加快速度， /正则/ 都会在事先被编译。即便你没有采纳这里的任何建议，
     /Redirector/ 在匹配时也足够快。

   要编写高效的 /匹配/ 模式，你应该：
   - 优先用 /正则/ 而不是通配符 ::
     /正则/ 在匹配时更精准；

   - 避免使用 /忽略大小写/ ::
     URL一般都是小写的；

   - 在匹配过程中，不匹配的URL应尽快地被排除 ::
      例如：
     - 如果你要匹配以 ~http://~ 开头的URL，
       ~^http://~ 会比 ~http://~ 更佳。

   - 优先使用“懒惰”而不是“贪婪”模式 ::
     这在被匹配部分较短时是适用的。

   另外提醒一点，规则列表中自动规则也应当合理地排列。

** 编写可维护的 /被替换式/
   考虑到 /Cr/ 不是时时刻刻都在进行重定向，
   （否则你就滥用了 /Redirector/ ）,
   你应当首先保证 /被替换式/ 的可维护性。
   为此，你应当：
   - 使 /被替换式/ 较短 ::
     例如：
     - 删除不必要的部分 ::
       - 开头和结尾的 ~.*~ ， ~.+~ 等都是不必要的，而应当在 /替换式/ 中使用 ~$`~ 或 @<code>$'@</code> 。

     - 一些常用的 /被替换式/ ::
       - ~https?://~ ::
         =~ ~http://~ 和 ~https://~;

       - ~^[^\.]+[^/]+~ ::
           =~ ~protocol://[username[:password]@]domain[:port]~
           （这里的方括号表示其中的内容是可选的）。

   - 优先使用非捕获组而不是捕获组 ::
     这有助于避免数错 ~$1~ 、 ~$2~ ……

   -----
